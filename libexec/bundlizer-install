#!/bin/sh

set -e


# Define constants

    readonly PREFIX=$(cd $(dirname $0)/.. && pwd)
    readonly BUNDLES=$PREFIX/bundles
    readonly APPS=$PREFIX/apps


# Install Bundler apps

    install() {
      check_bundles_dir_exists && {
        if echo $1 | egrep '^.+/.+$'; then
          local user=$(echo $1 | cut -d '/' -f1)
          local app=$(echo $1 | cut -d '/' -f2)
          local url="git://github.com/$user/$app.git"
          cd $BUNDLES
          git clone $url
          bundle_install_at $BUNDLES/$app
          install_bundle_exec_wrappers $BUNDLES/$app
        else
          echo "Option Format error. See 'bundlizer help'"
          return 1
        fi
      }
    }


# Check if bundles directory exists

    check_bundles_dir_exists() {
      [ -d $BUNDLES ] && return 0
      mkdir $BUNDLES
    }


# Bundle install under the vendor directory

    bundle_install_at() {
      local gem_path=$1
      if [ -f $gem_path/Gemfile ]; then
        cd $gem_path
        echo
        echo "Start bundle installing to $gem_path"
        bundle install --path vendor/bundle
      fi
    }


# Install bundle exec warppers to bundlizer exec bin

    install_bundle_exec_wrappers() {
      check_apps_dir_exists && {
        local app_path=$1
        for bin in $(get_app_bin_files $app_path); do
          bin_path=$APPS/$bin
          create_bundle_exec_wrapper $app_path $bin > $bin_path
          chmod +x $bin_path
          echo "It was installed '$bin' into $bin_path"
        done
      }
    }


# Check if bundler apps directory exists

    check_apps_dir_exists() {
      [ -d $APPS ] && return 0
      mkdir $APPS
    }


# Return Bundler apps executable file list

    get_app_bin_files() {
      local bindir=$1/bin
      [ -d $bindir ] && ls $bindir
    }


# Create a `bundle exec` wrapper script

    create_bundle_exec_wrapper() {
      local app=$(basename $1)
      local bin=$2
      cat << EOF
#!/bin/sh

current=\$(pwd)
cd \$(cd \$(dirname \$0)/.. && pwd)/bundles/$app
echo "'cd \$current && $bin \$@'" | xargs bundle exec bash -c
EOF
    }



install $@
